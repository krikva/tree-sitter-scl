===================
Function block test
===================

FUNCTION_BLOCK FB_DeviceStates
VAR_CONSTANT
	// Set this to the exact number of bits you need (e.g. 24, 40, 64, ...)
	MAX_BITS  : UINT := 64;
	MAX_BYTES : UINT := (MAX_BITS + 7) / 8;
END_VAR

VAR_INPUT
	// Set a bit
	SetReq    : BOOL;     // rising edge not required; level-driven set
	SetIndex  : UINT;     // 0..MAX_BITS-1
	SetValue  : BOOL;

	// Toggle a bit
	ToggleReq  : BOOL;
	ToggleIndex: UINT;
END_VAR

VAR_OUTPUT
	GetValue  : BOOL;     // value at GetIndex
	CountSet  : UINT;     // number of 1-bits
END_VAR

VAR
	States    : ARRAY[0..MAX_BITS-1] OF BOOL; // compact internal bitset (allocates only MAX_BITS)
	i         : UINT;
END_VAR

// Set a bit
IF SetReq AND (SetIndex < MAX_BITS) THEN
	States[SetIndex] := SetValue;
END_IF;

// Toggle a bit
IF ToggleReq AND (ToggleIndex < MAX_BITS) THEN
	States[ToggleIndex] := NOT States[ToggleIndex];
END_IF;

// Count set bits
CountSet := 0;
FOR i := 0 TO MAX_BITS - 1 DO
	IF States[i] THEN
		CountSet := CountSet + 1;
	END_IF;
END_FOR;

END_FUNCTION_BLOCK

-------------------------------------------------------------------

(source_file
      (program_organization_unit
        (function_block
          (identifier)
          (variable_declaration_section
            (var_constant_section
              (comment)
              (variable_declaration
                (identifier)
                (data_type)
                (expression
                  (literal
                    (number))))
              (variable_declaration
                (identifier)
                (data_type)
                (expression
                  (binary_expression
                    (expression
                      (parenthesized_expression
                        (expression
                          (binary_expression
                            (expression
                              (variable_access
                                (variable_base
                                  (identifier))))
                            (expression
                              (literal
                                (number)))))))
                    (expression
                      (literal
                        (number))))))))
          (variable_declaration_section
            (var_input_section
              (comment)
              (variable_declaration
                (identifier)
                (data_type)
                (comment))
              (variable_declaration
                (identifier)
                (data_type)
                (comment))
              (variable_declaration
                (identifier)
                (data_type)
                (comment))
              (variable_declaration
                (identifier)
                (data_type))
              (variable_declaration
                (identifier)
                (data_type))))
          (variable_declaration_section
            (var_output_section
              (variable_declaration
                (identifier)
                (data_type)
                (comment))
              (variable_declaration
                (identifier)
                (data_type)
                (comment))))
          (variable_declaration_section
            (var_section
              (variable_declaration
                (identifier)
                (array_declaration
                  (range
                    (expression
                      (literal
                        (number)))
                    (expression
                      (binary_expression
                        (expression
                          (variable_access
                            (variable_base
                              (identifier))))
                        (expression
                          (literal
                            (number))))))
                  (data_type))
                (comment))
              (variable_declaration
                (identifier)
                (data_type))))
          (statement_list
            (statement
              (comment))
            (statement
              (if_statement
                (expression
                  (binary_expression
                    (expression
                      (variable_access
                        (variable_base
                          (identifier))))
                    (expression
                      (parenthesized_expression
                        (expression
                          (binary_expression
                            (expression
                              (variable_access
                                (variable_base
                                  (identifier))))
                            (expression
                              (variable_access
                                (variable_base
                                  (identifier))))))))))
                (statement_list
                  (statement
                    (assignment_statement
                      (variable_access
                        (variable_base
                          (identifier))
                        (variable_selector
                          (expression
                            (variable_access
                              (variable_base
                                (identifier))))))
                      (expression
                        (variable_access
                          (variable_base
                            (identifier)))))))))
            (statement
              (comment))
            (statement
              (if_statement
                (expression
                  (binary_expression
                    (expression
                      (variable_access
                        (variable_base
                          (identifier))))
                    (expression
                      (parenthesized_expression
                        (expression
                          (binary_expression
                            (expression
                              (variable_access
                                (variable_base
                                  (identifier))))
                            (expression
                              (variable_access
                                (variable_base
                                  (identifier))))))))))
                (statement_list
                  (statement
                    (assignment_statement
                      (variable_access
                        (variable_base
                          (identifier))
                        (variable_selector
                          (expression
                            (variable_access
                              (variable_base
                                (identifier))))))
                      (expression
                        (unary_expression
                          (expression
                            (variable_access
                              (variable_base
                                (identifier))
                              (variable_selector
                                (expression
                                  (variable_access
                                    (variable_base
                                      (identifier))))))))))))))
            (statement
              (comment))
            (statement
              (assignment_statement
                (variable_access
                  (variable_base
                    (identifier)))
                (expression
                  (literal
                    (number)))))
            (statement
              (for_statement
                (identifier)
                (expression
                  (literal
                    (number)))
                (expression
                  (binary_expression
                    (expression
                      (variable_access
                        (variable_base
                          (identifier))))
                    (expression
                      (literal
                        (number)))))
                (statement_list
                  (statement
                    (if_statement
                      (expression
                        (variable_access
                          (variable_base
                            (identifier))
                          (variable_selector
                            (expression
                              (variable_access
                                (variable_base
                                  (identifier)))))))
                      (statement_list
                        (statement
                          (assignment_statement
                            (variable_access
                              (variable_base
                                (identifier)))
                            (expression
                              (binary_expression
                                (expression
                                  (variable_access
                                    (variable_base
                                      (identifier))))
                                (expression
                                  (literal
                                    (number)))))))))))))))))

===================
Function test
===================

FUNCTION FC_Calculate : REAL
VAR_INPUT
	a : REAL;
	b : REAL;
END_VAR

VAR_TEMP
	result : REAL;
END_VAR

// Calculate the square root of the sum of squares
result := SQRT(a * a + b * b);

// Return the result
FC_Calculate := result;

END_FUNCTION

--------------------------------------------------------------------------------
    (source_file
      (program_organization_unit
        (function
          (identifier)
          (data_type)
          (variable_declaration_section
            (var_input_section
              (variable_declaration
                (identifier)
                (data_type))
              (variable_declaration
                (identifier)
                (data_type))))
          (variable_declaration_section
            (var_temp_section
              (variable_declaration
                (identifier)
                (data_type))))
          (statement_list
            (statement
              (comment))
            (statement
              (assignment_statement
                (variable_access
                  (variable_base
                    (identifier)))
                (expression
                  (function_call
                    (identifier)
                    (function_argument
                      (expression
                        (binary_expression
                          (expression
                            (binary_expression
                              (expression
                                (variable_access
                                  (variable_base
                                    (identifier))))
                              (expression
                                (variable_access
                                  (variable_base
                                    (identifier))))))
                          (expression
                            (binary_expression
                              (expression
                                (variable_access
                                  (variable_base
                                    (identifier))))
                              (expression
                                (variable_access
                                  (variable_base
                                    (identifier)))))))))))))
            (statement
              (comment))
            (statement
              (assignment_statement
                (variable_access
                  (variable_base
                    (identifier)))
                (expression
                  (variable_access
                    (variable_base
                      (identifier))))))))))

===================
If statement test
===================

IF value > 10 THEN
	result := 'High';
ELSIF value > 5 THEN
	result := 'Medium';
ELSE
	result := 'Low';
END_IF;

---------------------------------------------------------------------------

(source_file
      (statement
        (if_statement
          (expression
            (binary_expression
              (expression
                (variable_access
                  (variable_base
                    (identifier))))
              (expression
                (literal
                  (number)))))
          (statement_list
            (statement
              (assignment_statement
                (variable_access
                  (variable_base
                    (identifier)))
                (expression
                  (literal
                    (string_literal))))))
          (elsif_clause
            (expression
              (binary_expression
                (expression
                  (variable_access
                    (variable_base
                      (identifier))))
                (expression
                  (literal
                    (number)))))
            (statement_list
              (statement
                (assignment_statement
                  (variable_access
                    (variable_base
                      (identifier)))
                  (expression
                    (literal
                      (string_literal)))))))
          (else_clause
            (statement_list
              (statement
                (assignment_statement
                  (variable_access
                    (variable_base
                      (identifier)))
                  (expression
                    (literal
                      (string_literal))))))))))


===================
Case statement test
===================

CASE status OF
	0:
		message := 'Stopped';
	1:
		message := 'Running';
	2..4:
		message := 'Warning';
	ELSE
		message := 'Error';
END_CASE;

---------------------------------------------------------------

    (source_file
      (statement
        (case_statement
          (expression
            (variable_access
              (variable_base
                (identifier))))
          (case_element
            (case_value
              (expression
                (literal
                  (number))))
            (statement_list
              (statement
                (assignment_statement
                  (variable_access
                    (variable_base
                      (identifier)))
                  (expression
                    (literal
                      (string_literal)))))))
          (case_element
            (case_value
              (expression
                (literal
                  (number))))
            (statement_list
              (statement
                (assignment_statement
                  (variable_access
                    (variable_base
                      (identifier)))
                  (expression
                    (literal
                      (string_literal)))))))
          (case_element
            (case_range
              (expression
                (literal
                  (number)))
              (expression
                (literal
                  (number))))
            (statement_list
              (statement
                (assignment_statement
                  (variable_access
                    (variable_base
                      (identifier)))
                  (expression
                    (literal
                      (string_literal)))))))
          (else_case
            (statement_list
              (statement
                (assignment_statement
                  (variable_access
                    (variable_base
                      (identifier)))
                  (expression
                    (literal
                      (string_literal))))))))))

