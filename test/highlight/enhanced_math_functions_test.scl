FUNCTION_BLOCK "EnhancedMathFunctionsTest"
//^ keyword

VAR
//^ keyword
    // Basic math function results
    // ^ comment
    absResult : REAL;
    //^ variable
    //          ^ type.builtin
    sqrResult : REAL;
    //^ variable
    //          ^ type.builtin
    sqrtResult : REAL;
    //^ variable
    //           ^ type.builtin
    
    // Exponential and logarithmic functions
    // ^ comment
    expResult : REAL;
    //^ variable
    //          ^ type.builtin
    expdResult : REAL;
    //^ variable
    //           ^ type.builtin
    lnResult : REAL;
    //^ variable
    //         ^ type.builtin
    logResult : REAL;
    //^ variable
    //          ^ type.builtin
    exptResult : REAL;
    //^ variable
    //           ^ type.builtin
    
    // Rounding and fraction functions
    // ^ comment
    roundResult : REAL;
    //^ variable
    //            ^ type.builtin
    truncResult : REAL;
    //^ variable
    //            ^ type.builtin
    ceilResult : REAL;
    //^ variable
    //           ^ type.builtin
    floorResult : REAL;
    //^ variable
    //            ^ type.builtin
    fracResult : REAL;
    //^ variable
    //           ^ type.builtin
    
    // Trigonometric function results
    // ^ comment
    sinResult : REAL;
    //^ variable
    //          ^ type.builtin
    cosResult : REAL;
    //^ variable
    //          ^ type.builtin
    tanResult : REAL;
    //^ variable
    //          ^ type.builtin
    asinResult : REAL;
    //^ variable
    //           ^ type.builtin
    acosResult : REAL;
    //^ variable
    //           ^ type.builtin
    atanResult : REAL;
    //^ variable
    //           ^ type.builtin
    atan2Result : REAL;
    //^ variable
    //            ^ type.builtin
    
    // Modulo operation
    // ^ comment
    modResult : REAL;
    //^ variable
    //          ^ type.builtin
    
    // For bit operations
    // ^ comment
    bitValue : DWORD := 16#12345678;
    // ^ variable
    //         ^ type.builtin
    //                   ^ constant.numeric
    rolResult : DWORD;
    // ^ variable
    //          ^ type.builtin
    rorResult : DWORD;
    // ^ variable
    //          ^ type.builtin
    shlResult : DWORD;
    // ^ variable
    //          ^ type.builtin
    shrResult : DWORD;
    // ^ variable
    //          ^ type.builtin
    
    // For selection functions
    // ^ comment
    selCondition : BOOL := TRUE;
    // ^ variable
    //             ^ type.builtin
    //                      ^ constant.builtin.boolean
    value1 : INT := 10;
    // ^ variable
    //       ^ type.builtin
    //              ^ constant.numeric
    value2 : INT := 20;
    // ^ variable
    //       ^ type.builtin
    //              ^ constant.numeric
    value3 : INT := 30;
    // ^ variable
    //       ^ type.builtin
    //              ^ constant.numeric
    selResult : BOOL;
    // ^ variable
    //           ^ type.builtin
    maxResult : INT;
    // ^ variable
    //          ^ type.builtin
    minResult : INT;
    // ^ variable
    //          ^ type.builtin
    limitResult : INT;
    // ^ variable
    //            ^ type.builtin
    muxResult : INT;
    // ^ variable
    //          ^ type.builtin
    
    // For scale functions
    // ^ comment
    rawValue : INT := 500;
    // ^ variable
    //         ^ type.builtin
    //                ^ constant.numeric
    scaledValue : REAL;
    // ^ variable
    //            ^ type.builtin
    
    // For move function
    // ^ comment
    sourceValue : INT := 42;
    // ^ variable
    //            ^ type.builtin
    //                   ^ constant.numeric
    targetValue : INT;
    // ^ variable
    //            ^ type.builtin
END_VAR
// ^ keyword

BEGIN
// ^ keyword
    // Basic math functions
    // ^ comment
    absResult := ABS(-10.5);
    // ^ variable
    //        ^ operator
    //            ^ function.call
    //                 ^ constant.numeric
    sqrResult := SQR(3.0);
    // ^ variable
    //         ^ operator
    //            ^ function.call
    //               ^ constant.numeric
    sqrtResult := SQRT(16.0);
    // ^ variable
    //          ^ operator
    //             ^ function.call
    //                 ^ constant.numeric
    
    // Exponential and logarithmic functions
    // ^ comment
    expResult := EXP(2.0);
    // ^ variable
    //         ^ operator
    //            ^ function.call
    //               ^ constant.numeric
    expdResult := EXPD(2.0);
    // ^ variable
    //          ^ operator
    //            ^ function.call
    //                 ^ constant.numeric
    lnResult := LN(10.0);
    // ^ variable
    //        ^ operator
    //           ^ function.call
    //              ^ constant.numeric
    logResult := LOG(100.0);
    // ^ variable
    //         ^ operator
    //            ^ function.call
    //               ^ constant.numeric
    exptResult := EXPT(2.0, 3.0);
    //^ variable
    //          ^ operator
    //              ^ function.call
    //                  ^ constant.numeric
    //                       ^ constant.numeric
    
    // Rounding and fraction functions
    // ^ comment
    roundResult := ROUND(10.7);
    //^ variable
    //           ^ operator
    //               ^ function.call
    //                    ^ constant.numeric
    truncResult := TRUNC(10.7);
    //^ variable
    //           ^ operator
    //               ^ function.call
    //                    ^ constant.numeric
    ceilResult := CEIL(10.3);
    // ^ variable
    //          ^ operator
    //             ^ function.call
    //                 ^ constant.numeric
    floorResult := FLOOR(10.7);
    // ^ variable
    //           ^ operator
    //              ^ function.call
    //                    ^ constant.numeric
    fracResult := FRAC(10.7);  // Returns 0.7
    // ^ variable
    //          ^ operator
    //             ^ function.call
    //                 ^ constant.numeric
    //                           ^ comment
    
    // Trigonometric functions
    // ^ comment
    sinResult := SIN(1.57);
    // ^ variable
    //         ^ operator
    //            ^ function.call
    //               ^ constant.numeric
    cosResult := COS(0.0);
    // ^ variable
    //         ^ operator
    //            ^ function.call
    //               ^ constant.numeric
    tanResult := TAN(0.78);
    // ^ variable
    //         ^ operator
    //            ^ function.call
    //               ^ constant.numeric
    asinResult := ASIN(0.5);
    // ^ variable
    //          ^ operator
    //             ^ function.call
    //                 ^ constant.numeric
    acosResult := ACOS(0.5);
    // ^ variable
    //          ^ operator
    //             ^ function.call
    //                 ^ constant.numeric
    atanResult := ATAN(1.0);
    // ^ variable
    //          ^ operator
    //             ^ function.call
    //                 ^ constant.numeric
    atan2Result := ATAN2(1.0, 1.0);  // Arc tangent of y/x
    // ^ variable
    //           ^ operator
    //              ^ function.call
    //                   ^ constant.numeric
    //                         ^ constant.numeric
    //                                  ^ comment
    
    // Modulo operation
    // ^ comment
    modResult := MOD(10.0, 3.0);  // Result is 1.0
    // ^ variable
    //         ^ operator
    //            ^ function.call
    //               ^ constant.numeric
    //                      ^ constant.numeric
    //                                ^ comment
    
    // Bit operations
    // ^ comment
    rolResult := ROL(bitValue, 8);
    // ^ variable
    //         ^ operator
    //            ^ function.call
    //               ^ variable
    //                         ^ constant.numeric
    rorResult := ROR(bitValue, 8);
    // ^ variable
    //         ^ operator
    //            ^ function.call
    //               ^ variable
    //                         ^ constant.numeric
    shlResult := SHL(bitValue, 4);
    // ^ variable
    //         ^ operator
    //            ^ function.call
    //               ^ variable
    //                         ^ constant.numeric
    shrResult := SHR(bitValue, 4);
    // ^ variable
    //         ^ operator
    //            ^ function.call
    //               ^ variable
    //                         ^ constant.numeric
    
    // Selection functions
    // ^ comment
    selResult := SEL(selCondition, FALSE, TRUE);
    // ^ variable
    //         ^ operator
    //            ^ function.call
    //               ^ variable
    //                             ^ constant.builtin.boolean
    //                                    ^ constant.builtin.boolean
    maxResult := MAX(value1, value2, value3);
    // ^ variable
    //         ^ operator
    //            ^ function.call
    //               ^ variable
    //                        ^ variable
    //                                 ^ variable
    minResult := MIN(value1, value2, value3);
    // ^ variable
    //         ^ operator
    //            ^ function.call
    //               ^ variable
    //                        ^ variable
    //                                 ^ variable
    limitResult := LIMIT(value1, value2, value3);
    // ^ variable
    //           ^ operator
    //              ^ function.call
    //                   ^ variable
    //                            ^ variable
    //                                    ^ variable
    muxResult := MUX(2, value1, value2, value3);
    // ^ variable
    //         ^ operator
    //            ^ function.call
    //               ^ constant.numeric
    //                  ^ variable
    //                           ^ variable
    //                                   ^ variable
    
    // Scale function
    // ^ comment
    scaledValue := SCALE_X(rawValue, 0.0, 100.0);
    // ^ variable
    //           ^ operator
    //              ^ function.call
    //                     ^ variable
    //                                 ^ constant.numeric
    //                                      ^ constant.numeric
    
    // Move function (assignment)
    // ^ comment
    MOVE(sourceValue, targetValue);
    // ^ function.call
    //    ^ variable
    //                ^ variable
    
END_FUNCTION_BLOCK
// ^ keyword
